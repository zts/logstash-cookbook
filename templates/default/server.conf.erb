# Basic logstash server config
input {
  amqp {
    <% amqp = node['logstash']['amqp'] %>
    type => "all"
    host => "<%= amqp['host'] %>"
    port => "<%= amqp['port'] %>"
    exchange_type => "<%= amqp['exchange_type'] %>"
    name => "logstash"
  }

  file {
    type => "syslog"

    # Wildcards work, here :)
    path => [ "/var/log/messages", "/var/log/secure", "/var/log/yum.log" ]
  }

 file {
   type => "apache-access"
   path => "/var/log/apache2/access.log"
 }

 file {
   type => "apache-error"
   path => "/var/log/apache2/error.log"
 }
}

filter {
  grok {
    type => "syslog" # for logs of type "syslog"
    pattern => "%{SYSLOGLINE}"
    # You can specify multiple 'pattern' lines
  }

  grok {
    type => "apache-access" # for logs of type 'apache-access'
    pattern => "%{COMBINEDAPACHELOG}"
  }

  date {
    type => "syslog"

    # The 'timestamp' and 'timestamp8601' names are for fields in the
    # logstash event.  The 'SYSLOGLINE' grok pattern above includes a field
    # named 'timestamp' that is set to the normal syslog timestamp if it
    # exists in the event.
    timestamp => "MMM  d HH:mm:ss"   # syslog 'day' value can be space-leading
    timestamp => "MMM dd HH:mm:ss"
    timestamp8601 => ISO8601 # Some syslogs use ISO8601 time format
  }

  date {
    type => "apache-access"
    timestamp => "dd/MMM/yyyy:HH:mm:ss Z"
  }
}

output {
  # Emit events to stdout for easy debugging of what is going through
  # logstash.
  # stdout { }

  # This will use elasticsearch to store your logs.
  # The 'embedded' option will cause logstash to run the elasticsearch
  # server in the same process, so you don't have to worry about
  # how to download, configure, or run elasticsearch!
  elasticsearch { embedded => true }
}
